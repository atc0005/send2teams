// Copyright 2019 Adam Chalkley
//
// https://github.com/atc0005/send2teams
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"errors"
	"flag"
	"fmt"
	"log"
	"os"

	//goteamsnotify "gopkg.in/dasrick/go-teams-notify.v1"

	// temporarily use our fork while developing changes for potential
	// inclusion in the upstream project
	goteamsnotify "github.com/atc0005/go-teams-notify"
	"github.com/atc0005/send2teams/config"
	"github.com/atc0005/send2teams/teams"
)

func main() {

	//log.Debug("Initializing application")

	cfg, err := config.NewConfig()
	switch {
	// TODO: How else to guard against nil cfg object?
	case cfg != nil && cfg.ShowVersion:
		config.Branding()
		os.Exit(0)
	case err == nil:
		// do nothing for this one
	case errors.Is(err, flag.ErrHelp):
		os.Exit(0)
	default:
		fmt.Printf("failed to initialize application: %s", err)
		os.Exit(1)
	}

	if cfg.VerboseOutput {
		log.Printf("Configuration: %s\n", cfg)
	}

	// Convert EOL if user requested it (useful for converting script output)
	if cfg.ConvertEOL {
		cfg.MessageText = teams.ConvertEOLToBreak(cfg.MessageText)
	}

	// setup message card
	msgCard := goteamsnotify.NewMessageCard()
	msgCard.Title = cfg.MessageTitle

	// This field appears to be REQUIRED; otherwise I get a 400 Bad Request
	// error. The JSON submitted:
	//
	// {
	//  "@type": "MessageCard",
	//  "@context": "https://schema.org/extensions",
	//  "title": "Testing from send2teams",
	//  "text": "",
	//  "themeColor": "#832561",
	//  "sections": [
	//      {
	//          "text": "Testing MessageCard changes"
	//      },
	//      {
	//          "text": "Message generated by [send2teams](https://github.com/atc0005/send2teams) (dev build)",
	//          "startGroup": true
	//      }
	//  ]
	// }
	//
	// The error message generated:
	// ERROR: Failed to submit message to "Testing" channel in the
	// "Adam-Chalkely" team: error on notification: 400 Bad Request
	//
	//
	// The message returned by curl:
	//
	// `Summary or Text is required.`
	//
	// FIXME: We need to make sure that this messages "rises" from the
	// go-teams-notify package to this app.

	msgCard.Text = "placeholder"
	msgCard.ThemeColor = cfg.ThemeColor

	mainMsgSection := goteamsnotify.NewMessageCardSection()
	mainMsgSection.Text = cfg.MessageText

	msgCard.AddSection(mainMsgSection)

	// Setup branding
	trailerSection := goteamsnotify.NewMessageCardSection()
	trailerSection.Text = config.MessageTrailer()
	trailerSection.StartGroup = true
	msgCard.AddSection(trailerSection)

	// FIXME: Work around goteamsnotify package using `log.Println(err)`
	// by directing all statements other than ours to /dev/null
	//log.SetOutput(ioutil.Discard)

	if err := teams.SendMessage(cfg.WebhookURL, msgCard); err != nil {

		// Display error output if silence is not requested
		if !cfg.SilentOutput {
			fmt.Printf("\n\nERROR: Failed to submit message to %q channel in the %q team: %v\n\n",
				cfg.Channel, cfg.Team, err)

			if cfg.VerboseOutput {
				fmt.Printf("[Config]: %+v\n[Error]: %v", cfg, err)
			}

		}

		// Regardless of silent flag, explicitly note unsuccessful results
		os.Exit(1)
	}

	// FIXME: Remove this workaround once the goteamsnotify package is
	// updated or I learn of a better/proper way to handle this
	//
	// By this point any errors emitted by the goteamsnotify package
	// should have already been emitted and then immediately redirected to
	// dev/null, so go ahead and restore logging output
	log.SetOutput(os.Stdout)

	if !cfg.SilentOutput {

		// Emit basic success message
		log.Println("Message successfully sent!")

	}

}
